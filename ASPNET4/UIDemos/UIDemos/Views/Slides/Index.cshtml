
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/slides")
</head>
<body>
    <!--

    So to summarize of all the possible attributes used to position presentation steps, we have:

    * `data-x`, `data-y`, `data-z` - they define the position of **the center** of step element on
        the canvas in pixels; their default value is 0;
    * `data-rotate-x`, `data-rotate-y`, 'data-rotate-z`, `data-rotate` - they define the rotation of
        the element around given axis in degrees; their default value is 0; `data-rotate` and `data-rotate-z`
        are exactly the same;
    * `data-scale` - defines the scale of step element; default value is 1

    These values are used by impress.js in CSS transformation functions, so for more information consult
    CSS transfrom docs: https://developer.mozilla.org/en/CSS/transform
    -->



    <div id="impress">
        <div id="intro" class="step slide">
            <h2>
                ASP.NET MVC UI Recipes <br />
                <small>Build Better Interfaces With Less Code</small>
            </h2>
            <br/>
            <br/>
            <br />
            <br />
            <br />
            <br />
            <p><strong>Dustin Ewers</strong></p>
            <p>
                Twitter: <strong>DustinJEwers</strong> <br/>
                Website: <strong>www.dustinewers.com</strong> <br />
                LinkedIn: <strong>www.linkedin.com/in/dustinewers</strong>
            </p>
            <p>
                Demo Code:
                <strong>github.com/DustinEwers/dot-net-mvc-ui-demos</strong>
            </p>
        </div>
        <div id="what-makes-a-good-form" class="step slide" data-x="0" data-y="1000">
            <h2>What makes a good form?</h2>
            <img src="~/Content/images/basicform.png" />
        </div>
        <div class="step slide" data-x="1000" data-y="1000">
            <h2>Useability</h2>
            <br /><br />
            <ul>
                <li>Affordances</li>
                <li>Useful Messaging</li>
                <li>Labels and their placement</li>
                <li>Required field indication</li>
                <li>Input Control Choice (Radio, Checkbox, Text, Select, etc...)</li>
                <li>Feedback</li>
            </ul>
        </div>
        <div class="step slide" data-x="2000" data-y="1000">
            <h2>Security</h2>
            <br /><br />
            <ul>
                <li>Input Validation</li>
                <li>XSS Prevention</li>
                <li>HTML Encoding</li>
            </ul>
        </div>
        <div class="step slide" data-x="3000" data-y="1000">
            <h2>Artistic / Visual Design</h2>
            <br /><br />
            <ul>
                <li>Color Choice</li>
                <li>Spacing and Padding</li>
                <li>Layout</li>
            </ul>
        </div>
        <div class="step slide" data-x="4000" data-y="1000">
            <h2>Accessability</h2>
            <br /><br />
            <ul>
                <li>Contrast levels</li>
                <li>Alt Tags</li>
                <li>Aria / Screen Readers</li>
                <li>Label matching</li>
            </ul>
        </div>
        <div class="step slide" data-x="2000" data-y="2000" data-scale="1.5">
            <h3>... and that's only the beginning.</h3>
            <img src="~/Content/images/iceberg.jpg" />
        </div>
        <div class="step slide" data-x="0" data-y="3000">
            <h3>So how do we handle all of this?</h3>
            <br /><br />
            <ul>
                <li>Checklists?</li>
                <li>Style Guides?</li>
                <li>Trying Harder?</li>
            </ul>
        </div>
        <div class="step slide" data-x="1000" data-y="3000">
            <h2>Bake it into your architecture!</h2>
            <img src="~/Content/images/pie_chart.jpeg" />
        </div>
        <div class="step slide" data-x="0" data-y="4000">
            <h2>Today's Goal</h2>
            <br />
            <h4>Use ASP.NET MVC to automate coding standards.</h4>
            <br />
            <h4>Advantages:</h4>
            <ul>
                <li>Separation of Concerns</li>
                <li>Faster Development</li>
                <li>Fewer bugs</li>
            </ul> 
        </div>
        <div class="step slide" data-x="0" data-y="5000">
            <h2>Roadmap</h2>
            <br /><br />
            <ul>
                <li>Custom Validation</li>
                <li>Templates</li>
                <li>HTML Helpers</li>
            </ul>
            <h4>ASP.NET MVC 6</h4>
            <ul>
                <li>Tag Helpers</li>
                <li>View Components</li>
            </ul>
        </div>
        <div class="step slide" data-x="0" data-y="6000">
            <h3>Custom Validation - Basic Validation</h3>
            <br /><br />
            <ul>
                <li>Regular Expression</li>
                <li>Range</li>
                <li>Required</li>
                <li>Remote</li>
            </ul>
        </div>
        <div class="step slide" data-x="1000" data-y="6000">
            <h3>Custom Validation - Custom</h3>
            <br /><br />
            @Html.ActionLink("to the Demo!", "Contact", "Home")
        </div>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/impress")

    <script type="text/javascript">
        impress().init();

    </script>

</body>
</html>
